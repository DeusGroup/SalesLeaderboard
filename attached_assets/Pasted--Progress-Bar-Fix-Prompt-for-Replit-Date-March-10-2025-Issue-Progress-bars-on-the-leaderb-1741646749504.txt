// Progress Bar Fix Prompt for Replit
// Date: March 10, 2025
// Issue: Progress bars on the leaderboard are not changing or reflecting actual metrics relative to goals set in the admin dashboard
// Goal: Ensure progress bars dynamically update based on current metrics and goals, keeping the existing codebase structure

/* INSTRUCTIONS:
You've reported that goals can be set in the admin dashboard, but the leaderboard progress bars are not updating or showing accurate percentages relative to the metrics (Board Revenue, MSP, Voice Seats, Total Deals). This fix will:
1. Verify data retrieval from the backend.
2. Correct the progress calculation logic.
3. Ensure the progress bars visually reflect the calculated percentages.
Follow these steps to debug and fix the issue while adapting to your existing codebase. Be verbose in comments for clarity. */

/* STEP-BY-STEP FIX */

// 1. CHECK BACKEND DATA RETRIEVAL
// Ensure the '/api/users' endpoint (or your equivalent) returns current metrics AND goals.
// Example backend code (server.js, assuming Express and MongoDB):
/*
const express = require('express');
const app = express();
app.use(express.json());

// API to fetch all users with metrics and goals
app.get('/api/users', async (req, res) => {
  try {
    const users = await User.find(); // Fetch all users from MongoDB
    res.status(200).json(users); // Ensure response includes metrics.current and metrics.goal
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ error: 'Failed to fetch users' });
  }
});

// Verify your User schema includes both current and goal values:
// {
//   name: String,
//   metrics: {
//     boardRevenue: { current: Number, goal: Number },
//     msp: { current: Number, goal: Number },
//     voiceSeats: { current: Number, goal: Number },
//     totalDeals: { current: Number, goal: Number }
//   }
//}
*/

// 2. DEBUG FRONTEND DATA FETCHING
// In your leaderboard JavaScript (e.g., leaderboard.js), log the fetched data to ensure it contains both current and goal values.
/*
async function loadLeaderboard() {
  try {
    const response = await fetch('/api/users');
    const users = await response.json();
    console.log('Fetched users:', users); // Debug: Check if current and goal values are present
    updateLeaderboard(users);
  } catch (error) {
    console.error('Error loading leaderboard:', error);
  }
}
*/

// 3. FIX PROGRESS BAR CALCULATION AND DISPLAY
// Update the leaderboard rendering logic to correctly calculate and display progress.
// Replace the existing loadLeaderboard or rendering function with this:
/*
function updateLeaderboard(users) {
  const leaderboardContainer = document.getElementById('leaderboard'); // Ensure this ID matches your HTML
  leaderboardContainer.innerHTML = ''; // Clear existing content

  users.forEach(user => {
    // Calculate progress percentages (handle division by zero and undefined cases)
    const boardRevenueProgress = user.metrics.boardRevenue.goal > 0 
      ? Math.min((user.metrics.boardRevenue.current / user.metrics.boardRevenue.goal) * 100, 100) 
      : 0;
    const mspProgress = user.metrics.msp.goal > 0 
      ? Math.min((user.metrics.msp.current / user.metrics.msp.goal) * 100, 100) 
      : 0;
    const voiceSeatsProgress = user.metrics.voiceSeats.goal > 0 
      ? Math.min((user.metrics.voiceSeats.current / user.metrics.voiceSeats.goal) * 100, 100) 
      : 0;
    const totalDealsProgress = user.metrics.totalDeals.goal > 0 
      ? Math.min((user.metrics.totalDeals.current / user.metrics.totalDeals.goal) * 100, 100) 
      : 0;

    // Log calculated percentages for debugging
    console.log(`${user.name} Progress - Board Revenue: ${boardRevenueProgress}%, MSP: ${mspProgress}%`);

    // Generate HTML for each user with progress bars
    const userRow = `
      <div class="user-row">
        <span class="user-name">${user.name}</span>
        <div class="metric">
          <span>Board Revenue: $${user.metrics.boardRevenue.current.toFixed(2)} / $${user.metrics.boardRevenue.goal.toFixed(2)}</span>
          <div class="progress-bar">
            <div class="progress" style="width: ${boardRevenueProgress}%"></div>
          </div>
        </div>
        <div class="metric">
          <span>MSP: $${user.metrics.msp.current.toFixed(2)} / $${user.metrics.msp.goal.toFixed(2)}</span>
          <div class="progress-bar">
            <div class="progress" style="width: ${mspProgress}%"></div>
          </div>
        </div>
        <div class="metric">
          <span>Voice Seats: ${user.metrics.voiceSeats.current} / ${user.metrics.voiceSeats.goal}</span>
          <div class="progress-bar">
            <div class="progress" style="width: ${voiceSeatsProgress}%"></div>
          </div>
        </div>
        <div class="metric">
          <span>Total Deals: ${user.metrics.totalDeals.current} / ${user.metrics.totalDeals.goal}</span>
          <div class="progress-bar">
            <div class="progress" style="width: ${totalDealsProgress}%"></div>
          </div>
        </div>
      </div>
    `;
    leaderboardContainer.innerHTML += userRow;
  });
}

// Call the function to load the leaderboard
loadLeaderboard();
*/

// 4. VERIFY CSS STYLING
// Ensure your progress bar CSS (in leaderboard.css) is correctly applied:
/*
.progress-bar {
  width: 100%;
  height: 20px;
  background-color: #f0f0f0;
  border-radius: 10px;
  overflow: hidden;
}
.progress {
  height: 100%;
  background-color: #4caf50; /* Green or your preferred color */
  transition: width 0.3s ease-in-out; /* Smooth animation for updates */
}
*/

// 5. TEST AND DEBUG
// - Open your browser's developer tools (F12) and check the console logs:
//   - Confirm 'Fetched users' shows current and goal values for all metrics.
//   - Confirm progress percentages are calculated correctly.
// - Test edge cases:
//   - Set a goal to 0; progress should show 0%.
//   - Set current > goal; progress should cap at 100%.
// - If progress bars still don’t update:
//   - Ensure the DOM is being updated (check leaderboardContainer.innerHTML).
//   - Verify CSS classes match your HTML structure.

// 6. FINAL VALIDATION
// - Set goals in the admin dashboard (e.g., Board Revenue Goal = $1000, current = $500).
// - Refresh the leaderboard and confirm the progress bar shows 50%.
// - Update a user’s current metric via the backend and reload; the bar should adjust.

/* END OF FIX */