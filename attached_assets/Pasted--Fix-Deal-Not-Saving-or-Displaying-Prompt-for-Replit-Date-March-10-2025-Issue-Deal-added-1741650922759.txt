// Fix Deal Not Saving or Displaying Prompt for Replit
// Date: March 10, 2025
// Issue: "Deal added successfully" message appears, but deals aren't saved or displayed in Deal History (admin or leaderboard)
// Goal: Debug and fix deal persistence, ensure deals display in both admin and leaderboard Deal History sections

/* INSTRUCTIONS:
The admin dashboard shows a "Deal added successfully" message after adding a deal, but the Deal History section still says "No deals recorded yet," and the leaderboard frontend also doesn't show the deals. This prompt will:
1. Debug the deal addition process to ensure deals are saved to the database.
2. Verify data retrieval and rendering in both admin and leaderboard Deal History sections.
3. Fix any issues with persistence, fetching, or display logic.
Assume a MongoDB backend with Express, and the existing HTML/CSS/JS structure. Be verbose in comments and include debugging steps. */

/* STEP-BY-STEP IMPLEMENTATION */

// 1. DEBUG DEAL ADDITION IN BACKEND
// Update server.js to add extensive logging and ensure deals are saved correctly:
/*
const express = require('express');
const mongoose = require('mongoose');
const app = express();
app.use(express.json());

// Ensure MongoDB connection
mongoose.connect('mongodb://localhost:27017/salesBoard', { // Replace with your MongoDB URI
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Define User schema
const userSchema = new mongoose.Schema({
  name: String,
  metrics: {
    boardRevenue: { current: Number, goal: Number },
    msp: { current: Number, goal: Number },
    voiceSeats: { current: Number, goal: Number },
    totalDeals: { current: Number, goal: Number }
  },
  dealHistory: [{
    dealId: String,
    title: String,
    amount: Number,
    date: Date,
    type: String // Add type field for deal type (e.g., Board Revenue)
  }]
});
const User = mongoose.model('User', userSchema);

// Debug /api/addDeal endpoint
app.post('/api/addDeal', async (req, res) => {
  const { userId, title, amount, date, type } = req.body;
  console.log('Received deal data:', { userId, title, amount, date, type }); // Debug incoming request
  if (!userId || !title || !amount || !type) {
    console.error('Missing required fields');
    return res.status(400).json({ error: 'Missing required fields' });
  }
  try {
    const deal = { dealId: Date.now().toString(), title, amount, date: new Date(date), type };
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { $push: { dealHistory: deal }, $inc: { 'metrics.totalDeals.current': 1 } },
      { new: true }
    );
    if (!updatedUser) {
      console.error('User not found for ID:', userId);
      return res.status(404).json({ error: 'User not found' });
    }
    console.log('Updated user with new deal:', updatedUser); // Debug full user object
    console.log('Deal history after update:', updatedUser.dealHistory); // Debug deal history
    res.status(200).json({ message: 'Deal added successfully', user: updatedUser });
  } catch (error) {
    console.error('Error adding deal:', error);
    res.status(500).json({ error: 'Failed to add deal' });
  }
});

// Ensure /api/users/:userId endpoint returns full user data
app.get('/api/users/:userId', async (req, res) => {
  try {
    const user = await User.findById(req.params.userId);
    if (!user) {
      console.error('User not found for ID:', req.params.userId);
      return res.status(404).json({ error: 'User not found' });
    }
    console.log('Fetched user:', user); // Debug fetched user
    res.status(200).json(user);
  } catch (error) {
    console.error('Error fetching user:', error);
    res.status(500).json({ error: 'Failed to fetch user' });
  }
});
*/

// 2. UPDATE ADMIN JAVASCRIPT FOR DEBUGGING AND FIX
// Modify admin.js to handle the new 'type' field, add logging, and fix display:
/*
async function loadAdminDashboard() {
  const response = await fetch('/api/users');
  const users = await response.json();
  console.log('Fetched users for admin:', users); // Debug fetched users
  const tableBody = document.getElementById('usersTableBody');
  const dealUserSelect = document.getElementById('dealUser');
  const historyUserSelect = document.getElementById('historyUser');
  
  tableBody.innerHTML = '';
  dealUserSelect.innerHTML = '<option value="">Select Participant</option>';
  historyUserSelect.innerHTML = '<option value="">Select Participant</option>';

  users.forEach(user => {
    const row = `
      <tr>
        <td>${user.name}</td>
        <td><input type="number" value="${user.metrics.boardRevenue.goal}" onchange="updateGoal('${user._id}', 'boardRevenue', this.value)"></td>
        <td><input type="number" value="${user.metrics.msp.goal}" onchange="updateGoal('${user._id}', 'msp', this.value)"></td>
        <td><input type="number" value="${user.metrics.voiceSeats.goal}" onchange="updateGoal('${user._id}', 'voiceSeats', this.value)"></td>
        <td><input type="number" value="${user.metrics.totalDeals.goal}" onchange="updateGoal('${user._id}', 'totalDeals', this.value)"></td>
        <td><button onclick="saveGoals('${user._id}')">Save</button></td>
      </tr>
    `;
    tableBody.innerHTML += row;
    dealUserSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
    historyUserSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
  });
  loadDealHistory(); // Load history on page load
}

document.getElementById('addDealForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const deal = {
    userId: document.getElementById('dealUser').value,
    title: document.getElementById('dealTitle').value,
    amount: parseFloat(document.getElementById('dealAmount').value),
    date: new Date(),
    type: document.getElementById('dealType').value // Add deal type
  };
  console.log('Submitting deal:', deal); // Debug submitted data
  const response = await fetch('/api/addDeal', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(deal)
  });
  const result = await response.json();
  console.log('Add deal response:', result); // Debug response
  if (response.ok) {
    alert('Deal added successfully!');
    document.getElementById('addDealForm').reset();
    loadDealHistory();
  } else {
    alert('Failed to add deal: ' + result.error);
  }
});

async function loadDealHistory() {
  const userId = document.getElementById('historyUser').value;
  const dealBox = document.getElementById('dealHistoryBox');
  dealBox.innerHTML = 'Loading...';
  if (userId) {
    const response = await fetch(`/api/users/${userId}`);
    const user = await response.json();
    console.log('Fetched user for deal history (admin):', user); // Debug fetched user
    dealBox.innerHTML = '';
    if (user && user.dealHistory && user.dealHistory.length > 0) {
      user.dealHistory.forEach(deal => {
        dealBox.innerHTML += `
          <div class="deal-item">
            <input type="checkbox" class="deal-checkbox" data-deal-id="${deal.dealId}">
            <span>${deal.title}: $${deal.amount.toFixed(2)} - ${new Date(deal.date).toLocaleDateString()} (${deal.type})</span>
            <button onclick="removeDeal('${userId}', '${deal.dealId}')">Remove</button>
          </div>
        `;
      });
    } else {
      dealBox.innerHTML = '<p>No deals recorded yet.</p>';
    }
  } else {
    dealBox.innerHTML = '<p>Select a participant to view deal history.</p>';
  }
}

// Include other functions (updateGoal, saveGoals, removeDeal, bulkEditDeals, bulkDeleteDeals) from previous prompt
loadAdminDashboard();
*/

// 3. UPDATE LEADERBOARD JAVASCRIPT FOR CONSISTENCY
// Modify leaderboard.js to include the 'type' field and add logging:
/*
async function loadDealHistory() {
  const userId = document.getElementById('userSelect').value;
  const dealBox = document.getElementById('dealHistoryBox');
  dealBox.innerHTML = 'Loading...';
  if (userId) {
    const response = await fetch(`/api/users/${userId}`);
    const user = await response.json();
    console.log('Fetched user for deal history (leaderboard):', user); // Debug fetched user
    dealBox.innerHTML = '';
    if (user && user.dealHistory && user.dealHistory.length > 0) {
      user.dealHistory.forEach(deal => {
        dealBox.innerHTML += `<p>${deal.title}: $${deal.amount.toFixed(2)} - ${new Date(deal.date).toLocaleDateString()} (${deal.type})</p>`;
      });
    } else {
      dealBox.innerHTML = '<p>No deals recorded yet.</p>';
    }
  } else {
    dealBox.innerHTML = '<p>Select a user to view deal history.</p>';
  }
}

// Include other leaderboard functions (loadLeaderboard, showTab) from previous prompt
*/

// 4. UPDATE ADMIN HTML TO MATCH FORM
// Ensure admin.html matches the form in the image:
/*
<div class="deal-entry-section">
  <h3>Add New Deal</h3>
  <form id="addDealForm">
    <label for="dealUser">Select Participant:</label>
    <select id="dealUser" name="dealUser" required></select><br>
    <label for="dealTitle">Deal Title:</label>
    <input type="text" id="dealTitle" name="dealTitle" placeholder="Enter deal title" required><br>
    <label for="dealAmount">Amount ($):</label>
    <input type="number" id="dealAmount" name="dealAmount" step="0.01" min="0" required><br>
    <label for="dealType">Deal Type:</label>
    <select id="dealType" name="dealType" required>
      <option value="Board Revenue">Board Revenue</option>
      <option value="MSP">MSP</option>
      <option value="Voice Seats">Voice Seats</option>
      <option value="Total Deals">Total Deals</option>
    </select><br>
    <button type="submit" style="background-color: #28a745; color: white; padding: 10px; border: none; border-radius: 5px;">Add Deal</button>
  </form>
</div>
<div class="deal-history-section">
  <h3>Deal History</h3>
  <label for="historyUser">Select Participant:</label>
  <select id="historyUser" name="historyUser" onchange="loadDealHistory()"></select>
  <div id="dealHistoryBox" class="deal-history-box"></div>
</div>
*/

// 5. DEBUGGING STEPS
// a. Check MongoDB connection:
// - Ensure `mongoose.connect` URI is correct (local or cloud).
// - Use MongoDB Compass or shell to check if `users` collection has `dealHistory` data:
//   db.users.findOne({ name: "Andrew" })

// b. Test deal addition:
// - Add a deal for Andrew; check server logs for 'Received deal data' and 'Updated user with new deal'.
// - If no update occurs, verify Andrew's `userId` matches a database `_id`.

// c. Test data retrieval:
// - Open browser console (F12) and check logs for 'Fetched user for deal history'.
// - Ensure `dealHistory` array is populated.

// 6. FIX POTENTIAL ISSUES
// If deals still don’t show:
// - Verify `userId` format (should be MongoDB ObjectId, e.g., "507f1f77bcf86cd799439011").
// - Add test data manually in MongoDB:
/*
db.users.updateOne(
  { name: "Andrew" },
  { $push: { dealHistory: { dealId: "test1", title: "Test Deal", amount: 100, date: ISODate(), type: "Board Revenue" } } }
);
*/

// 7. TESTING
// - Add a deal for Andrew; verify it appears in Deal History on both admin and leaderboard.
// - If still failing, review server and browser logs for errors.

// 8. FINAL VALIDATION
// - Confirm deals persist across refreshes and display correctly.

/* END OF IMPLEMENTATION */