// Comprehensive Fix for Deal History Not Populating Prompt for Replit
// Date: March 10, 2025
// Issue: Deals added in Deal Management section show "Deal added successfully" but don't populate Deal History in admin or Sales Board (leaderboard)
// Goal: Fully diagnose and fix deal persistence and display, ensuring mirroring between admin and leaderboard

/* INSTRUCTIONS:
Despite hours of troubleshooting, deals aren't appearing in the Deal History sections despite successful addition messages. This comprehensive prompt will:
1. Rebuild and debug the backend (MongoDB/Express) to ensure deals are saved.
2. Validate frontend (admin and leaderboard) data fetching and rendering.
3. Ensure Deal History mirrors between admin and Sales Board.
4. Provide manual testing and fallback options if automated fixes fail.
Assume a MongoDB backend with Express, and the existing HTML/CSS/JS structure. Include extensive logging and validation at every step. */

/* STEP-BY-STEP IMPLEMENTATION */

// 1. REBUILD AND DEBUG BACKEND (server.js)
// Start fresh with a clean setup to isolate issues
const express = require('express');
const mongoose = require('mongoose');
const app = express();
app.use(express.json());

// Configure MongoDB connection with detailed logging
const mongoURI = 'mongodb://localhost:27017/salesBoard'; // Replace with your URI (e.g., MongoDB Atlas)
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('MongoDB connected successfully to:', mongoURI);
}).catch(err => {
  console.error('MongoDB connection failed:', err.message, err.stack);
  process.exit(1); // Exit if connection fails
});

// Define User schema with strict validation
const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  metrics: {
    boardRevenue: { current: { type: Number, default: 0 }, goal: { type: Number, default: 0 } },
    msp: { current: { type: Number, default: 0 }, goal: { type: Number, default: 0 } },
    voiceSeats: { current: { type: Number, default: 0 }, goal: { type: Number, default: 0 } },
    totalDeals: { current: { type: Number, default: 0 }, goal: { type: Number, default: 0 } }
  },
  dealHistory: [{
    dealId: { type: String, required: true, unique: true },
    title: { type: String, required: true },
    amount: { type: Number, required: true, min: 0 },
    date: { type: Date, required: true, default: Date.now },
    type: { type: String, required: true, enum: ['Board Revenue', 'MSP', 'Voice Seats', 'Total Deals'] }
  }]
}, { timestamps: true });
const User = mongoose.model('User', userSchema);

// Debug /api/addDeal endpoint with validation and logging
app.post('/api/addDeal', async (req, res) => {
  const { userId, title, amount, type } = req.body;
  console.log('Incoming deal request:', req.body); // Log full request
  if (!userId || !title || !amount || !type) {
    console.error('Validation failed: Missing fields:', { userId, title, amount, type });
    return res.status(400).json({ error: 'All fields (userId, title, amount, type) are required' });
  }
  if (isNaN(amount) || amount < 0) {
    console.error('Validation failed: Invalid amount:', amount);
    return res.status(400).json({ error: 'Amount must be a positive number' });
  }
  if (!['Board Revenue', 'MSP', 'Voice Seats', 'Total Deals'].includes(type)) {
    console.error('Validation failed: Invalid deal type:', type);
    return res.status(400).json({ error: 'Invalid deal type' });
  }
  try {
    const deal = { dealId: Date.now().toString(), title, amount, type };
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { $push: { dealHistory: deal }, $inc: { 'metrics.totalDeals.current': 1 } },
      { new: true, runValidators: true, upsert: false }
    );
    if (!updatedUser) {
      console.error('User not found for ID:', userId);
      return res.status(404).json({ error: 'User not found' });
    }
    console.log('Successfully updated user with deal:', updatedUser);
    console.log('Deal history after update:', updatedUser.dealHistory);
    res.status(200).json({ message: 'Deal added successfully', user: updatedUser });
  } catch (error) {
    console.error('Error adding deal:', error.message, error.stack);
    res.status(500).json({ error: 'Failed to add deal', details: error.message });
  }
});

// Debug /api/users/:userId endpoint
app.get('/api/users/:userId', async (req, res) => {
  try {
    const user = await User.findById(req.params.userId);
    if (!user) {
      console.error('User not found for ID:', req.params.userId);
      return res.status(404).json({ error: 'User not found' });
    }
    console.log('Fetched user data:', user);
    res.status(200).json(user);
  } catch (error) {
    console.error('Error fetching user:', error.message, error.stack);
    res.status(500).json({ error: 'Failed to fetch user', details: error.message });
  }
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// 2. REBUILD ADMIN JAVASCRIPT (admin.js)
// Ensure proper data flow and rendering
async function loadAdminDashboard() {
  try {
    const response = await fetch('/api/users');
    const users = await response.json();
    console.log('Fetched users for admin:', users);
    const tableBody = document.getElementById('usersTableBody');
    const dealUserSelect = document.getElementById('dealUser');
    const historyUserSelect = document.getElementById('historyUser');
    
    tableBody.innerHTML = '';
    dealUserSelect.innerHTML = '<option value="">Select Participant</option>';
    historyUserSelect.innerHTML = '<option value="">Select Participant</option>';

    if (Array.isArray(users)) {
      users.forEach(user => {
        if (user && user._id && user.name) {
          const row = `
            <tr>
              <td>${user.name}</td>
              <td><input type="number" value="${user.metrics.boardRevenue.goal || 0}" onchange="updateGoal('${user._id}', 'boardRevenue', this.value)"></td>
              <td><input type="number" value="${user.metrics.msp.goal || 0}" onchange="updateGoal('${user._id}', 'msp', this.value)"></td>
              <td><input type="number" value="${user.metrics.voiceSeats.goal || 0}" onchange="updateGoal('${user._id}', 'voiceSeats', this.value)"></td>
              <td><input type="number" value="${user.metrics.totalDeals.goal || 0}" onchange="updateGoal('${user._id}', 'totalDeals', this.value)"></td>
              <td><button onclick="saveGoals('${user._id}')">Save</button></td>
            </tr>
          `;
          tableBody.innerHTML += row;
          dealUserSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
          historyUserSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
        } else {
          console.warn('Invalid user object:', user);
        }
      });
    } else {
      console.error('Invalid users data format:', users);
    }
    loadDealHistory();
  } catch (error) {
    console.error('Error loading admin dashboard:', error);
  }
}

document.getElementById('addDealForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const dealUser = document.getElementById('dealUser');
  const dealTitle = document.getElementById('dealTitle');
  const dealAmount = document.getElementById('dealAmount');
  const dealType = document.getElementById('dealType');
  const deal = {
    userId: dealUser.value,
    title: dealTitle.value.trim(),
    amount: parseFloat(dealAmount.value) || 0,
    type: dealType.value
  };
  console.log('Prepared deal data:', deal);
  if (!deal.userId || !deal.title || isNaN(deal.amount) || deal.amount < 0) {
    alert('Please fill all fields with valid data (title and amount > 0).');
    return;
  }
  try {
    const response = await fetch('/api/addDeal', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(deal)
    });
    const result = await response.json();
    console.log('Server response:', result);
    if (response.ok) {
      alert('Deal added successfully!');
      dealUser.selectedIndex = 0; // Reset to default
      dealTitle.value = '';
      dealAmount.value = '';
      loadDealHistory();
    } else {
      alert('Failed to add deal: ' + result.error);
    }
  } catch (error) {
    console.error('Fetch error:', error);
    alert('An error occurred while adding the deal.');
  }
});

async function loadDealHistory() {
  const userId = document.getElementById('historyUser').value;
  const dealBox = document.getElementById('dealHistoryBox');
  dealBox.innerHTML = 'Loading deals...';
  if (userId) {
    try {
      const response = await fetch(`/api/users/${userId}`);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const user = await response.json();
      console.log('Fetched user for deal history (admin):', user);
      dealBox.innerHTML = '';
      if (user && user.dealHistory && Array.isArray(user.dealHistory) && user.dealHistory.length > 0) {
        user.dealHistory.forEach(deal => {
          dealBox.innerHTML += `
            <div class="deal-item">
              <span>${deal.title}: $${deal.amount.toFixed(2)} - ${new Date(deal.date).toLocaleDateString()} (${deal.type})</span>
            </div>
          `;
        });
      } else {
        dealBox.innerHTML = '<p>No deals recorded yet.</p>';
      }
    } catch (error) {
      console.error('Error loading deal history:', error);
      dealBox.innerHTML = '<p>Error loading deal history. Check console.</p>';
    }
  } else {
    dealBox.innerHTML = '<p>Select a participant to view deal history.</p>';
  }
}

// Include other functions (updateGoal, saveGoals) as needed
loadAdminDashboard();

// 3. REBUILD LEADERBOARD JAVASCRIPT (leaderboard.js)
// Ensure mirroring with admin
async function loadDealHistory() {
  const userId = document.getElementById('userSelect').value;
  const dealBox = document.getElementById('dealHistoryBox');
  dealBox.innerHTML = 'Loading deals...';
  if (userId) {
    try {
      const response = await fetch(`/api/users/${userId}`);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const user = await response.json();
      console.log('Fetched user for deal history (leaderboard):', user);
      dealBox.innerHTML = '';
      if (user && user.dealHistory && Array.isArray(user.dealHistory) && user.dealHistory.length > 0) {
        user.dealHistory.forEach(deal => {
          dealBox.innerHTML += `
            <p>${deal.title}: $${deal.amount.toFixed(2)} - ${new Date(deal.date).toLocaleDateString()} (${deal.type})</p>
          `;
        });
      } else {
        dealBox.innerHTML = '<p>No deals recorded yet.</p>';
      }
    } catch (error) {
      console.error('Error loading deal history (leaderboard):', error);
      dealBox.innerHTML = '<p>Error loading deal history. Check console.</p>';
    }
  } else {
    dealBox.innerHTML = '<p>Select a user to view deal history.</p>';
  }
}

// Include other leaderboard functions (loadLeaderboard, showTab) as needed

// 4. UPDATE ADMIN HTML
// Match the provided image structure
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sales Board - Admin</title>
  <link rel="stylesheet" href="/styles/admin.css">
</head>
<body>
  <header>
    <h1>Sales Board</h1>
    <nav>
      <a href="/admin">Performance Metrics</a>
      <a href="/deal-management" class="active">Deal Management</a>
      <a href="/leaderboard">Leaderboard</a>
      <a href="/logout">Sign Out</a>
    </nav>
  </header>
  <div class="admin-container">
    <div class="deal-entry-section">
      <h3>Add New Deal</h3>
      <form id="addDealForm">
        <label for="dealUser">Select Participant:</label>
        <select id="dealUser" name="dealUser" required></select><br>
        <label for="dealTitle">Deal Title:</label>
        <input type="text" id="dealTitle" name="dealTitle" placeholder="Enter deal title" required><br>
        <label for="dealAmount">Amount ($):</label>
        <input type="number" id="dealAmount" name="dealAmount" step="0.01" min="0" required><br>
        <label for="dealType">Deal Type:</label>
        <select id="dealType" name="dealType" required>
          <option value="Board Revenue">Board Revenue</option>
          <option value="MSP">MSP</option>
          <option value="Voice Seats">Voice Seats</option>
          <option value="Total Deals">Total Deals</option>
        </select><br>
        <button type="submit" style="background-color: #28a745; color: white; padding: 10px; border: none; border-radius: 5px;">Add Deal</button>
      </form>
    </div>
    <div class="deal-history-section">
      <h3>Deal History</h3>
      <label for="historyUser">Select Participant:</label>
      <select id="historyUser" name="historyUser" onchange="loadDealHistory()"></select>
      <div id="dealHistoryBox" class="deal-history-box"></div>
    </div>
  </div>
  <script src="/scripts/admin.js"></script>
</body>
</html>

// 5. UPDATE LEADERBOARD HTML
// Ensure Sales Board structure
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sales Board - Leaderboard</title>
  <link rel="stylesheet" href="/styles/leaderboard.css">
</head>
<body>
  <header>
    <h1>Sales Board</h1>
    <nav>
      <a href="/admin">Performance Metrics</a>
      <a href="/deal-management">Deal Management</a>
      <a href="/leaderboard" class="active">Leaderboard</a>
      <a href="/logout">Sign Out</a>
    </nav>
  </header>
  <div class="leaderboard-container">
    <div class="tabs">
      <button class="tab-button active" onclick="showTab('metrics')">Metrics</button>
      <button class="tab-button" onclick="showTab('dealHistory')">Deal History</button>
    </div>
    <div id="metrics" class="tab-content active">
      <div id="leaderboardGrid"></div>
    </div>
    <div id="dealHistory" class="tab-content">
      <select id="userSelect" onchange="loadDealHistory()"></select>
      <div id="dealHistoryBox"></div>
    </div>
  </div>
  <script src="/scripts/leaderboard.js"></script>
</body>
</html>

// 6. DEBUGGING AND TROUBLESHOOTING STEPS
// a. Verify MongoDB Setup:
// - Ensure MongoDB is running locally (e.g., `mongod` on default port 27017).
// - Check Replit environment variables or terminal for MongoDB URI if using a hosted service.
// - Use MongoDB Compass or shell to inspect data:
//   db.users.find().pretty() // List all users
//   db.users.findOne({ name: "Andrew" }) // Check Andrew's data

// b. Test Deal Addition:
// - Add a deal for Andrew (e.g., title: "Test Deal", amount: 500, type: "Board Revenue").
// - Check server logs in Replit console for 'Incoming deal request', 'Successfully updated user', and 'Deal history after update'.
// - If 'User not found' appears, verify `userId` in the `dealUser` select matches a MongoDB `_id` (e.g., copy from `db.users.find()`).

// c. Test Data Retrieval:
// - Open browser console (F12) and check logs for 'Fetched user data for deal history' in both admin and leaderboard.
// - Ensure `dealHistory` array is present and populated in the response.

// d. Manual Data Insertion (Fallback):
// If automated addition fails, insert test data directly:
//   db.users.updateOne(
//     { name: "Andrew" },
//     { $push: { dealHistory: { dealId: "manualTest1", title: "Manual Test", amount: 1000, date: ISODate(), type: "Board Revenue" } } },
//     { upsert: true }
//   )
// - Reload admin and leaderboard, select Andrew, and verify display.

// 7. COMMON FIXES
// - If `userId` mismatch: Ensure the `dealUser` select populates with valid `_id` values from `/api/users`.
// - If `dealHistory` empty: Check MongoDB schema alignment (e.g., field names, types) and clear collection if corrupted:
//   db.users.updateMany({}, { $set: { dealHistory: [] } })
// - If network errors: Verify Replit proxy settings or CORS if using a separate backend.

// 8. TESTING AND VALIDATION
// - Add a deal via admin; confirm it appears in Deal History for the selected user.
// - Switch to Sales Board, select the same user, and verify the same deal appears.
// - Refresh both pages and test persistence.
// - If issues persist, share server and browser logs for further analysis.

// 9. FINAL STEPS
// - Once working, remove excessive console.logs for production.
// - Document any manual fixes (e.g., schema changes) for future reference.

/* END OF IMPLEMENTATION */