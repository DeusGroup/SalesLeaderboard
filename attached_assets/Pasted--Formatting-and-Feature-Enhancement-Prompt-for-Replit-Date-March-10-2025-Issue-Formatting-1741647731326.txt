// Formatting and Feature Enhancement Prompt for Replit
// Date: March 10, 2025
// Issue: Formatting issues on admin dashboard and leaderboard due to many metrics; need to add Deal History tab and deal-adding functionality
// Goal: Reformat views for all metrics, display all users in one view, add Deal History tab on leaderboard, and deal-adding section in admin

/* INSTRUCTIONS:
The admin dashboard and leaderboard are functional but have formatting issues due to displaying multiple metrics (Board Revenue, MSP, Voice Seats, Total Deals). The goal is to:
1. Reformat the admin dashboard and leaderboard to handle all metrics cleanly while showing all users in one view.
2. Add a 'Deal History' tab on the leaderboard that opens a box with deal details.
3. Add a section in the admin dashboard to input deals, which will populate the Deal History box.
Assume the attached pictures (not visible here) show cramped or overlapping elements. Use a responsive, scrollable, or tabbed layout to fix this. Be verbose in comments and adapt to the existing codebase. */

/* STEP-BY-STEP IMPLEMENTATION */

// 1. DATABASE SCHEMA UPDATE FOR DEAL HISTORY
// Add a 'dealHistory' array to the user schema to store deal records.
// Example MongoDB schema update:
/*
const userSchema = {
  name: String,
  metrics: {
    boardRevenue: { current: Number, goal: Number },
    msp: { current: Number, goal: Number },
    voiceSeats: { current: Number, goal: Number },
    totalDeals: { current: Number, goal: Number }
  },
  dealHistory: [{
    dealId: String, // Unique ID (e.g., generated by backend)
    title: String, // Deal name
    amount: Number, // Deal value in $
    date: Date // Date of deal
  }]
};
*/

// 2. ADMIN DASHBOARD: REFORMAT AND ADD DEAL SECTION
// Update admin.html to use a scrollable table for metrics and add a deal input section.
/*
<div class="admin-container">
  <h2>Admin Dashboard - User Goals</h2>
  <div class="users-table-wrapper">
    <table class="users-table">
      <thead>
        <tr>
          <th>Name</th>
          <th>Board Revenue ($)</th>
          <th>MSP ($)</th>
          <th>Voice Seats</th>
          <th>Total Deals</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="usersTableBody"></tbody>
    </table>
  </div>

  <div class="deal-entry-section">
    <h3>Add Deal for User</h3>
    <form id="addDealForm">
      <label for="dealUser">Select User:</label>
      <select id="dealUser" name="dealUser" required></select><br>
      <label for="dealTitle">Deal Title:</label>
      <input type="text" id="dealTitle" name="dealTitle" required><br>
      <label for="dealAmount">Deal Amount ($):</label>
      <input type="number" id="dealAmount" name="dealAmount" step="0.01" min="0" required><br>
      <button type="submit">Add Deal</button>
    </form>
  </div>
</div>
*/

// Add CSS (admin.css) for a clean, scrollable layout:
/*
.admin-container {
  padding: 20px;
}
.users-table-wrapper {
  max-height: 400px; /* Limit height, scroll if needed */
  overflow-y: auto;
  margin-bottom: 20px;
}
.users-table {
  width: 100%;
  border-collapse: collapse;
}
.users-table th, .users-table td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: center;
}
.users-table th {
  background-color: #f5f5f5;
  position: sticky;
  top: 0;
}
.deal-entry-section {
  padding: 20px;
  border: 1px solid #ccc;
}
.deal-entry-section label {
  display: block;
  margin: 10px 0 5px;
}
.deal-entry-section input, .deal-entry-section select {
  width: 200px;
  padding: 5px;
}
*/

// 3. ADMIN DASHBOARD: POPULATE TABLE AND HANDLE DEAL SUBMISSION
// Update admin.js to populate the table and handle deal addition:
/*
async function loadAdminDashboard() {
  const response = await fetch('/api/users');
  const users = await response.json();
  const tableBody = document.getElementById('usersTableBody');
  const dealUserSelect = document.getElementById('dealUser');
  
  tableBody.innerHTML = '';
  dealUserSelect.innerHTML = '<option value="">Select User</option>';

  users.forEach(user => {
    // Populate table row
    const row = `
      <tr>
        <td>${user.name}</td>
        <td><input type="number" value="${user.metrics.boardRevenue.goal}" onchange="updateGoal('${user._id}', 'boardRevenue', this.value)"></td>
        <td><input type="number" value="${user.metrics.msp.goal}" onchange="updateGoal('${user._id}', 'msp', this.value)"></td>
        <td><input type="number" value="${user.metrics.voiceSeats.goal}" onchange="updateGoal('${user._id}', 'voiceSeats', this.value)"></td>
        <td><input type="number" value="${user.metrics.totalDeals.goal}" onchange="updateGoal('${user._id}', 'totalDeals', this.value)"></td>
        <td><button onclick="saveGoals('${user._id}')">Save</button></td>
      </tr>
    `;
    tableBody.innerHTML += row;

    // Populate user dropdown for deals
    dealUserSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
  });
}

async function updateGoal(userId, metric, value) {
  // Temporary storage or immediate save can be implemented here
  console.log(`Updated ${metric} goal for user ${userId} to ${value}`);
}

async function saveGoals(userId) {
  const goals = {
    boardRevenueGoal: parseFloat(document.querySelector(`tr td input[onchange*="${userId}"]`).value),
    mspGoal: parseFloat(document.querySelectorAll(`tr td input[onchange*="${userId}"]`)[1].value),
    voiceSeatsGoal: parseInt(document.querySelectorAll(`tr td input[onchange*="${userId}"]`)[2].value),
    totalDealsGoal: parseInt(document.querySelectorAll(`tr td input[onchange*="${userId}"]`)[3].value)
  };
  await fetch('/api/setGoals', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, goals })
  });
}

document.getElementById('addDealForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const deal = {
    userId: document.getElementById('dealUser').value,
    title: document.getElementById('dealTitle').value,
    amount: parseFloat(document.getElementById('dealAmount').value),
    date: new Date()
  };
  await fetch('/api/addDeal', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(deal)
  });
  alert('Deal added!');
});

loadAdminDashboard();
*/

// 4. BACKEND: ADD DEAL ENDPOINT
// In server.js, add an endpoint to handle deal addition:
/*
app.post('/api/addDeal', async (req, res) => {
  const { userId, title, amount, date } = req.body;
  try {
    const deal = { dealId: Date.now().toString(), title, amount, date }; // Simple unique ID
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { $push: { dealHistory: deal }, $inc: { 'metrics.totalDeals.current': 1 } },
      { new: true }
    );
    res.status(200).json({ message: 'Deal added', user: updatedUser });
  } catch (error) {
    res.status(500).json({ error: 'Failed to add deal' });
  }
});
*/

// 5. LEADERBOARD: REFORMAT WITH TABS AND DEAL HISTORY
// Update leaderboard.html to use tabs and a deal history modal:
/*
<div class="leaderboard-container">
  <h2>Leaderboard</h2>
  <div class="tabs">
    <button class="tab-button active" onclick="showTab('metrics')">Metrics</button>
    <button class="tab-button" onclick="showTab('dealHistory')">Deal History</button>
  </div>
  <div id="metrics" class="tab-content active">
    <div class="users-grid" id="leaderboardGrid"></div>
  </div>
  <div id="dealHistory" class="tab-content">
    <select id="userSelect" onchange="loadDealHistory()"></select>
    <div id="dealHistoryBox"></div>
  </div>
</div>
*/

// Add CSS (leaderboard.css) for a grid layout and modal:
/*
.leaderboard-container {
  padding: 20px;
}
.tabs {
  margin-bottom: 20px;
}
.tab-button {
  padding: 10px 20px;
  cursor: pointer;
}
.tab-button.active {
  background-color: #4caf50;
  color: white;
}
.tab-content {
  display: none;
}
.tab-content.active {
  display: block;
}
.users-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
}
.user-card {
  padding: 15px;
  border: 1px solid #ddd;
  border-radius: 5px;
}
.progress-bar {
  width: 100%;
  height: 15px;
  background-color: #f0f0f0;
  border-radius: 8px;
  overflow: hidden;
}
.progress {
  height: 100%;
  background-color: #4caf50;
}
#dealHistoryBox {
  margin-top: 10px;
  padding: 15px;
  border: 1px solid #ccc;
  max-height: 300px;
  overflow-y: auto;
}
*/

// 6. LEADERBOARD: POPULATE GRID AND DEAL HISTORY
// Update leaderboard.js:
/*
async function loadLeaderboard() {
  const response = await fetch('/api/users');
  const users = await response.json();
  const grid = document.getElementById('leaderboardGrid');
  const userSelect = document.getElementById('userSelect');
  
  grid.innerHTML = '';
  userSelect.innerHTML = '<option value="">Select User</option>';

  users.forEach(user => {
    const progress = {
      boardRevenue: user.metrics.boardRevenue.goal > 0 ? Math.min((user.metrics.boardRevenue.current / user.metrics.boardRevenue.goal) * 100, 100) : 0,
      msp: user.metrics.msp.goal > 0 ? Math.min((user.metrics.msp.current / user.metrics.msp.goal) * 100, 100) : 0,
      voiceSeats: user.metrics.voiceSeats.goal > 0 ? Math.min((user.metrics.voiceSeats.current / user.metrics.voiceSeats.goal) * 100, 100) : 0,
      totalDeals: user.metrics.totalDeals.goal > 0 ? Math.min((user.metrics.totalDeals.current / user.metrics.totalDeals.goal) * 100, 100) : 0
    };

    grid.innerHTML += `
      <div class="user-card">
        <h3>${user.name}</h3>
        <p>Board Revenue: $${user.metrics.boardRevenue.current} / $${user.metrics.boardRevenue.goal}</p>
        <div class="progress-bar"><div class="progress" style="width: ${progress.boardRevenue}%"></div></div>
        <p>MSP: $${user.metrics.msp.current} / $${user.metrics.msp.goal}</p>
        <div class="progress-bar"><div class="progress" style="width: ${progress.msp}%"></div></div>
        <p>Voice Seats: ${user.metrics.voiceSeats.current} / ${user.metrics.voiceSeats.goal}</p>
        <div class="progress-bar"><div class="progress" style="width: ${progress.voiceSeats}%"></div></div>
        <p>Total Deals: ${user.metrics.totalDeals.current} / ${user.metrics.totalDeals.goal}</p>
        <div class="progress-bar"><div class="progress" style="width: ${progress.totalDeals}%"></div></div>
      </div>
    `;
    userSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
  });
}

function showTab(tabId) {
  document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
  document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
  document.getElementById(tabId).classList.add('active');
  document.querySelector(`button[onclick="showTab('${tabId}')"]`).classList.add('active');
}

async function loadDealHistory() {
  const userId = document.getElementById('userSelect').value;
  const dealBox = document.getElementById('dealHistoryBox');
  dealBox.innerHTML = '';
  if (userId) {
    const response = await fetch(`/api/users/${userId}`);
    const user = await response.json();
    user.dealHistory.forEach(deal => {
      dealBox.innerHTML += `<p>${deal.title}: $${deal.amount} - ${new Date(deal.date).toLocaleDateString()}</p>`;
    });
  }
}

loadLeaderboard();
*/

// 7. BACKEND: USER DETAIL ENDPOINT
// Add an endpoint for individual user data:
/*
app.get('/api/users/:userId', async (req, res) => {
  try {
    const user = await User.findById(req.params.userId);
    res.status(200).json(user);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch user' });
  }
});
*/

// 8. TESTING
// - Admin: Add goals and deals; ensure table scrolls and all users are visible.
// - Leaderboard: Switch tabs, check grid layout, and view deal history for a user.

/* END OF IMPLEMENTATION */