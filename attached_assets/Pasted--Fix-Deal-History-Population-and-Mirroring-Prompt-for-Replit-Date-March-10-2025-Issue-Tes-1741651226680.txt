// Fix Deal History Population and Mirroring Prompt for Replit
// Date: March 10, 2025
// Issue: Test data added in Deal Management section doesn't populate Deal History in admin or Sales Board (leaderboard) after selecting a user
// Goal: Debug and fix deal persistence, ensure Deal History populates in admin and mirrors on Sales Board leaderboard

/* INSTRUCTIONS:
The 'Deal added successfully' message appears when adding test data in the Deal Management section, but the Deal History section in the admin dashboard and the Sales Board (leaderboard) remain empty with 'No deals recorded yet' even after selecting a user. This prompt will:
1. Debug the deal addition process to ensure data is saved to the database.
2. Verify data retrieval and rendering in both admin and Sales Board Deal History sections.
3. Ensure the Deal History is mirrored (same data) between admin and Sales Board.
Assume a MongoDB backend with Express, and the existing HTML/CSS/JS structure. Be verbose in comments and include debugging steps. */

/* STEP-BY-STEP IMPLEMENTATION */

// 1. DEBUG DEAL ADDITION IN BACKEND
// Update server.js with detailed logging to confirm deal persistence:
/*
const express = require('express');
const mongoose = require('mongoose');
const app = express();
app.use(express.json());

// Ensure MongoDB connection
mongoose.connect('mongodb://localhost:27017/salesBoard', { // Replace with your actual MongoDB URI
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('MongoDB connected successfully'))
  .catch(err => console.error('MongoDB connection error:', err));

// Define User schema
const userSchema = new mongoose.Schema({
  name: String,
  metrics: {
    boardRevenue: { current: Number, goal: Number },
    msp: { current: Number, goal: Number },
    voiceSeats: { current: Number, goal: Number },
    totalDeals: { current: Number, goal: Number }
  },
  dealHistory: [{
    dealId: String,
    title: String,
    amount: Number,
    date: Date,
    type: String // Matches the form's Deal Type field
  }]
});
const User = mongoose.model('User', userSchema);

// Debug /api/addDeal endpoint
app.post('/api/addDeal', async (req, res) => {
  const { userId, title, amount, date, type } = req.body;
  console.log('Received deal data from client:', { userId, title, amount, date, type }); // Debug incoming data
  if (!userId || !title || !amount || !type) {
    console.error('Missing required fields:', { userId, title, amount, type });
    return res.status(400).json({ error: 'Missing required fields' });
  }
  try {
    const deal = { dealId: Date.now().toString(), title, amount, date: new Date(date), type };
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { $push: { dealHistory: deal }, $inc: { 'metrics.totalDeals.current': 1 } },
      { new: true, runValidators: true }
    );
    if (!updatedUser) {
      console.error('User not found for ID:', userId);
      return res.status(404).json({ error: 'User not found' });
    }
    console.log('User updated with new deal:', updatedUser); // Debug full user object
    console.log('Deal history after update:', updatedUser.dealHistory); // Debug deal history array
    res.status(200).json({ message: 'Deal added successfully', user: updatedUser });
  } catch (error) {
    console.error('Error adding deal:', error.message, error.stack);
    res.status(500).json({ error: 'Failed to add deal', details: error.message });
  }
});

// Ensure /api/users/:userId endpoint works correctly
app.get('/api/users/:userId', async (req, res) => {
  try {
    const user = await User.findById(req.params.userId);
    if (!user) {
      console.error('User not found for ID:', req.params.userId);
      return res.status(404).json({ error: 'User not found' });
    }
    console.log('Fetched user for display:', user); // Debug fetched user
    res.status(200).json(user);
  } catch (error) {
    console.error('Error fetching user:', error);
    res.status(500).json({ error: 'Failed to fetch user' });
  }
});
*/

// 2. UPDATE ADMIN JAVASCRIPT FOR DEBUGGING AND DISPLAY
// Modify admin.js to ensure proper data handling and rendering:
/*
async function loadAdminDashboard() {
  const response = await fetch('/api/users');
  const users = await response.json();
  console.log('Fetched users for admin dashboard:', users); // Debug fetched users
  const tableBody = document.getElementById('usersTableBody');
  const dealUserSelect = document.getElementById('dealUser');
  const historyUserSelect = document.getElementById('historyUser');
  
  tableBody.innerHTML = '';
  dealUserSelect.innerHTML = '<option value="">Select Participant</option>';
  historyUserSelect.innerHTML = '<option value="">Select Participant</option>';

  users.forEach(user => {
    const row = `
      <tr>
        <td>${user.name}</td>
        <td><input type="number" value="${user.metrics.boardRevenue.goal || 0}" onchange="updateGoal('${user._id}', 'boardRevenue', this.value)"></td>
        <td><input type="number" value="${user.metrics.msp.goal || 0}" onchange="updateGoal('${user._id}', 'msp', this.value)"></td>
        <td><input type="number" value="${user.metrics.voiceSeats.goal || 0}" onchange="updateGoal('${user._id}', 'voiceSeats', this.value)"></td>
        <td><input type="number" value="${user.metrics.totalDeals.goal || 0}" onchange="updateGoal('${user._id}', 'totalDeals', this.value)"></td>
        <td><button onclick="saveGoals('${user._id}')">Save</button></td>
      </tr>
    `;
    tableBody.innerHTML += row;
    dealUserSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
    historyUserSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
  });
  loadDealHistory(); // Load history on page load if a user is selected
}

document.getElementById('addDealForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const deal = {
    userId: document.getElementById('dealUser').value,
    title: document.getElementById('dealTitle').value.trim(),
    amount: parseFloat(document.getElementById('dealAmount').value) || 0,
    date: new Date(),
    type: document.getElementById('dealType').value
  };
  console.log('Submitting deal to server:', deal); // Debug submitted deal
  if (!deal.userId || !deal.title || isNaN(deal.amount)) {
    alert('Please fill all required fields correctly.');
    return;
  }
  const response = await fetch('/api/addDeal', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(deal)
  });
  const result = await response.json();
  console.log('Server response for deal addition:', result); // Debug server response
  if (response.ok) {
    alert('Deal added successfully!');
    document.getElementById('addDealForm').reset();
    loadDealHistory();
  } else {
    alert('Failed to add deal: ' + result.error);
  }
});

async function loadDealHistory() {
  const userId = document.getElementById('historyUser').value;
  const dealBox = document.getElementById('dealHistoryBox');
  dealBox.innerHTML = 'Loading deals...'; // Indicate loading state
  if (userId) {
    const response = await fetch(`/api/users/${userId}`);
    const user = await response.json();
    console.log('Fetched user data for deal history (admin):', user); // Debug fetched data
    dealBox.innerHTML = '';
    if (user && Array.isArray(user.dealHistory) && user.dealHistory.length > 0) {
      user.dealHistory.forEach(deal => {
        dealBox.innerHTML += `
          <div class="deal-item">
            <span>${deal.title}: $${deal.amount.toFixed(2)} - ${new Date(deal.date).toLocaleDateString()} (${deal.type})</span>
          </div>
        `;
      });
    } else {
      dealBox.innerHTML = '<p>No deals recorded yet.</p>';
    }
  } else {
    dealBox.innerHTML = '<p>Select a participant to view deal history.</p>';
  }
}

// Include other functions (updateGoal, saveGoals) as needed from previous prompts
loadAdminDashboard();
*/

// 3. UPDATE LEADERBOARD JAVASCRIPT FOR MIRRORING
// Modify leaderboard.js to ensure mirroring with admin Deal History:
/*
async function loadDealHistory() {
  const userId = document.getElementById('userSelect').value;
  const dealBox = document.getElementById('dealHistoryBox');
  dealBox.innerHTML = 'Loading deals...'; // Indicate loading state
  if (userId) {
    const response = await fetch(`/api/users/${userId}`);
    const user = await response.json();
    console.log('Fetched user data for deal history (leaderboard):', user); // Debug fetched data
    dealBox.innerHTML = '';
    if (user && Array.isArray(user.dealHistory) && user.dealHistory.length > 0) {
      user.dealHistory.forEach(deal => {
        dealBox.innerHTML += `
          <p>${deal.title}: $${deal.amount.toFixed(2)} - ${new Date(deal.date).toLocaleDateString()} (${deal.type})</p>
        `;
      });
    } else {
      dealBox.innerHTML = '<p>No deals recorded yet.</p>';
    }
  } else {
    dealBox.innerHTML = '<p>Select a user to view deal history.</p>';
  }
}

// Include other leaderboard functions (loadLeaderboard, showTab) from previous prompts
*/

// 4. UPDATE ADMIN HTML TO MATCH FORM
// Ensure admin.html aligns with the provided image:
/*
<div class="deal-entry-section">
  <h3>Add New Deal</h3>
  <form id="addDealForm">
    <label for="dealUser">Select Participant:</label>
    <select id="dealUser" name="dealUser" required></select><br>
    <label for="dealTitle">Deal Title:</label>
    <input type="text" id="dealTitle" name="dealTitle" placeholder="Enter deal title" required><br>
    <label for="dealAmount">Amount ($):</label>
    <input type="number" id="dealAmount" name="dealAmount" step="0.01" min="0" required><br>
    <label for="dealType">Deal Type:</label>
    <select id="dealType" name="dealType" required>
      <option value="Board Revenue">Board Revenue</option>
      <option value="MSP">MSP</option>
      <option value="Voice Seats">Voice Seats</option>
      <option value="Total Deals">Total Deals</option>
    </select><br>
    <button type="submit" style="background-color: #28a745; color: white; padding: 10px; border: none; border-radius: 5px;">Add Deal</button>
  </form>
</div>
<div class="deal-history-section">
  <h3>Deal History</h3>
  <label for="historyUser">Select Participant:</label>
  <select id="historyUser" name="historyUser" onchange="loadDealHistory()"></select>
  <div id="dealHistoryBox" class="deal-history-box"></div>
</div>
*/

// 5. DEBUGGING STEPS
// a. Check MongoDB connection and data:
// - Verify `mongoose.connect` URI is correct (e.g., `mongodb://localhost:27017/salesBoard`).
// - Use MongoDB Compass or shell to inspect the `users` collection:
//   db.users.findOne({ name: "Andrew" }) // Check if dealHistory exists

// b. Test deal addition:
// - Add a deal for Andrew; check server logs for 'Received deal data' and 'User updated with new deal'.
// - If no update, verify Andrew's `userId` matches a valid MongoDB `_id`.

// c. Test data retrieval:
// - Open browser console (F12) and check logs for 'Fetched user data for deal history'.
// - Ensure `dealHistory` array is populated in the response.

// 6. FIX POTENTIAL ISSUES
// If deals still don’t populate:
// - Verify `userId` format (should be a valid MongoDB ObjectId, e.g., "507f1f77bcf86cd799439011").
// - Manually insert test data in MongoDB to confirm display:
/*
db.users.updateOne(
  { name: "Andrew" },
  { $push: { dealHistory: { dealId: "test123", title: "Test Deal", amount: 500, date: ISODate(), type: "Board Revenue" } } }
);
*/

// 7. TESTING
// - Add a deal for Andrew in the admin dashboard; verify it appears in Deal History.
// - Select Andrew on the Sales Board (leaderboard) and check Deal History; it should mirror the admin view.
// - If still failing, review server and browser logs for errors.

// 8. FINAL VALIDATION
// - Confirm deals persist across page refreshes and mirror between admin and Sales Board.

/* END OF IMPLEMENTATION */