// Fix Deal History Not Displaying Prompt for Replit
// Date: March 10, 2025
// Issue: Deals not showing in Deal History on admin dashboard or leaderboard; "No deals recorded yet" persists
// Goal: Diagnose and fix deal persistence and display, ensuring correlation between admin and leaderboard

/* INSTRUCTIONS:
Deals added via the admin dashboard's deal management section aren't appearing in the Deal History sections of either the admin dashboard or leaderboard. This prompt will:
1. Debug the deal addition process to ensure data saves to the database.
2. Verify data retrieval and rendering in both admin and leaderboard views.
3. Fix any issues with persistence, fetching, or display logic.
Assume a MongoDB backend with Express, and the existing HTML/CSS/JS structure. Be verbose in comments and include debugging steps. */

/* STEP-BY-STEP IMPLEMENTATION */

// 1. DEBUG DEAL ADDITION IN BACKEND
// Update server.js to log and verify deal persistence:
/*
const express = require('express');
const mongoose = require('mongoose'); // Ensure mongoose is imported if using MongoDB
const app = express();
app.use(express.json());

// Define User schema (ensure this matches your setup)
const userSchema = new mongoose.Schema({
  name: String,
  metrics: {
    boardRevenue: { current: Number, goal: Number },
    msp: { current: Number, goal: Number },
    voiceSeats: { current: Number, goal: Number },
    totalDeals: { current: Number, goal: Number }
  },
  dealHistory: [{
    dealId: String,
    title: String,
    amount: Number,
    date: Date
  }]
});
const User = mongoose.model('User', userSchema);

// Add deal endpoint with debugging
app.post('/api/addDeal', async (req, res) => {
  const { userId, title, amount, date } = req.body;
  console.log('Received deal data:', { userId, title, amount, date }); // Debug incoming request
  try {
    const deal = { dealId: Date.now().toString(), title, amount, date: new Date(date) };
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { $push: { dealHistory: deal }, $inc: { 'metrics.totalDeals.current': 1 } },
      { new: true }
    );
    if (!updatedUser) {
      console.error('User not found for ID:', userId);
      return res.status(404).json({ error: 'User not found' });
    }
    console.log('Updated user with new deal:', updatedUser.dealHistory); // Debug saved data
    res.status(200).json({ message: 'Deal added', user: updatedUser });
  } catch (error) {
    console.error('Error adding deal:', error);
    res.status(500).json({ error: 'Failed to add deal' });
  }
});

// Ensure other endpoints are present (e.g., /api/users, /api/users/:userId) from previous prompts
*/

// 2. VERIFY DATABASE CONNECTION
// Ensure MongoDB is connected in server.js (add if missing):
/*
mongoose.connect('mongodb://localhost:27017/yourDatabaseName', { // Replace with your MongoDB URI
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));
*/

// 3. UPDATE ADMIN JAVASCRIPT FOR DEBUGGING
// Modify admin.js to log fetched data and fix display:
/*
async function loadAdminDashboard() {
  const response = await fetch('/api/users');
  const users = await response.json();
  console.log('Fetched users for admin:', users); // Debug fetched users
  const tableBody = document.getElementById('usersTableBody');
  const dealUserSelect = document.getElementById('dealUser');
  const historyUserSelect = document.getElementById('historyUser');
  
  tableBody.innerHTML = '';
  dealUserSelect.innerHTML = '<option value="">Select User</option>';
  historyUserSelect.innerHTML = '<option value="">Select User</option>';

  users.forEach(user => {
    const row = `
      <tr>
        <td>${user.name}</td>
        <td><input type="number" value="${user.metrics.boardRevenue.goal}" onchange="updateGoal('${user._id}', 'boardRevenue', this.value)"></td>
        <td><input type="number" value="${user.metrics.msp.goal}" onchange="updateGoal('${user._id}', 'msp', this.value)"></td>
        <td><input type="number" value="${user.metrics.voiceSeats.goal}" onchange="updateGoal('${user._id}', 'voiceSeats', this.value)"></td>
        <td><input type="number" value="${user.metrics.totalDeals.goal}" onchange="updateGoal('${user._id}', 'totalDeals', this.value)"></td>
        <td><button onclick="saveGoals('${user._id}')">Save</button></td>
      </tr>
    `;
    tableBody.innerHTML += row;
    dealUserSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
    historyUserSelect.innerHTML += `<option value="${user._id}">${user.name}</option>`;
  });
  loadDealHistory(); // Load history on page load
}

document.getElementById('addDealForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const deal = {
    userId: document.getElementById('dealUser').value,
    title: document.getElementById('dealTitle').value,
    amount: parseFloat(document.getElementById('dealAmount').value),
    date: new Date()
  };
  console.log('Submitting deal:', deal); // Debug submitted data
  const response = await fetch('/api/addDeal', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(deal)
  });
  const result = await response.json();
  console.log('Add deal response:', result); // Debug response
  if (response.ok) {
    alert('Deal added!');
    document.getElementById('addDealForm').reset();
    loadDealHistory();
  } else {
    alert('Failed to add deal: ' + result.error);
  }
});

async function loadDealHistory() {
  const userId = document.getElementById('historyUser').value;
  const dealBox = document.getElementById('dealHistoryBox');
  dealBox.innerHTML = 'Loading...'; // Temporary message
  if (userId) {
    const response = await fetch(`/api/users/${userId}`);
    const user = await response.json();
    console.log('Fetched user for deal history (admin):', user); // Debug fetched user
    dealBox.innerHTML = ''; // Clear loading message
    if (user && user.dealHistory && user.dealHistory.length > 0) {
      user.dealHistory.forEach(deal => {
        dealBox.innerHTML += `
          <div class="deal-item">
            <input type="checkbox" class="deal-checkbox" data-deal-id="${deal.dealId}">
            <span>${deal.title}: $${deal.amount.toFixed(2)} - ${new Date(deal.date).toLocaleDateString()}</span>
            <button onclick="removeDeal('${userId}', '${deal.dealId}')">Remove</button>
          </div>
        `;
      });
    } else {
      dealBox.innerHTML = '<p>No deals recorded yet.</p>';
    }
  } else {
    dealBox.innerHTML = '<p>Select a user to view deal history.</p>';
  }
}

// Include other functions (updateGoal, saveGoals, removeDeal, bulkEditDeals, bulkDeleteDeals) from previous prompt
loadAdminDashboard();
*/

// 4. UPDATE LEADERBOARD JAVASCRIPT FOR DEBUGGING
// Modify leaderboard.js to log and fix display:
/*
async function loadDealHistory() {
  const userId = document.getElementById('userSelect').value;
  const dealBox = document.getElementById('dealHistoryBox');
  dealBox.innerHTML = 'Loading...'; // Temporary message
  if (userId) {
    const response = await fetch(`/api/users/${userId}`);
    const user = await response.json();
    console.log('Fetched user for deal history (leaderboard):', user); // Debug fetched user
    dealBox.innerHTML = ''; // Clear loading message
    if (user && user.dealHistory && user.dealHistory.length > 0) {
      user.dealHistory.forEach(deal => {
        dealBox.innerHTML += `<p>${deal.title}: $${deal.amount.toFixed(2)} - ${new Date(deal.date).toLocaleDateString()}</p>`;
      });
    } else {
      dealBox.innerHTML = '<p>No deals recorded yet.</p>';
    }
  } else {
    dealBox.innerHTML = '<p>Select a user to view deal history.</p>';
  }
}

// Include other leaderboard functions (loadLeaderboard, showTab) from previous prompt
*/

// 5. DEBUGGING STEPS
// a. Check MongoDB connection:
// - Ensure `mongoose.connect` uses the correct URI (e.g., local or cloud like MongoDB Atlas).
// - Run `mongo` or a GUI (e.g., Compass) to check if `users` collection has `dealHistory` data.

// b. Test deal addition:
// - Add a deal via the admin form.
// - Check server logs for 'Received deal data' and 'Updated user with new deal'.
// - If no update occurs, verify `userId` matches a valid `_id` in the database.

// c. Test data retrieval:
// - Open browser console (F12) and check logs for 'Fetched user for deal history'.
// - Ensure `dealHistory` array is present and populated.

// 6. FIX POTENTIAL ISSUES
// If deals still donâ€™t show:
// - Ensure `userId` from the form matches MongoDB `_id` format (e.g., ObjectId).
// - Add test data manually in MongoDB if needed:
/*
db.users.updateOne(
  { _id: ObjectId("yourUserIdHere") },
  { $push: { dealHistory: { dealId: "test1", title: "Test Deal", amount: 100, date: ISODate() } } }
);
*/

// 7. TESTING
// - Add a deal in the admin dashboard; verify it appears in Deal History.
// - Check the leaderboard Deal History tab for the same user.
// - If still failing, review logs and database directly.

// 8. FINAL VALIDATION
// - Confirm deals persist across page refreshes and display in both views.

/* END OF IMPLEMENTATION */